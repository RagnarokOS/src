#!/bin/ksh

# kernupd: install/update the experimental Ragnarok build of the Linux kernel in one go.
#
# $Ragnarok: kernupd,v 1.4 2024/03/11 23:20:33 lecorbeau Exp $
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#											#
#	Copyright (c) 2024, Ian LeCorbeau <I-LeCorbeau (at) protonmail (dot) com>	#
#											#
#	Permission to use, copy, modify, and/or distribute this software for any	#
#	purpose with or without fee is hereby granted, provided that the above		#
#	copyright notice and this permission notice appear in all copies.		#
#											#
#	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES	#
#	WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF		#
#	MERCHANTABILITY AND FITNESS IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR		#
#	ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES		#
#	WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN		#
#	ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF		#
#	OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.			#
#											#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

. /lib/ragnarok-shlib

set -e
umask 0022
export PATH=/usr/bin:/bin:/usr/sbin:/sbin

TMP=$(mktemp -d -p /tmp kernupd.XXXXXXXXXX)
CHANGES="https://raw.githubusercontent.com/RagnarokOS/kernel-build/master/changelog"
MIRROR="https://github.com/RagnarokOS/kernel-build/releases/download/"
PUBKEY="/etc/signify/ragnarok01.pub"

usage() {
	printf '%s\n' "
Options:

-d	download, but don't install the kernel.

-i	install the kernel if '-d' was used.

-h	Show this help message.

-q	Check if there are any updates available.

The most common operation is to run kernupd with no option, which will
download and install the kernel if a new version is available.
"
}

# Never download stuff from the internet as the root user
# I take no credit for this function. All credit goes to
# Antoine Jacoutot, who wrote OpenBSD's syspatch(1).
unpriv() {
	local _file=$2 _ret=0 _user=_sysupdate

	if [[ $1 == -f && -n ${_file} ]]; then
		# shellcheck disable=SC2188
		>${_file}
		chown "${_user}" "${_file}"
		chmod 0711 "${TMP}"
		shift 2
	fi
	(($# >= 1))

	su -s /bin/sh ${_user} -c "$@" || _ret=$?

	[[ -n ${_file} ]] && chown root "${_file}"

	return ${_ret}
}

# Get the changelog
get_changes() {
	local _ret

	printf '%s\n' "Fetching index.txt..."
	cd "${TMP}" || cd
	unpriv -f "${TMP}/changelog" "wget -q --show-progress -O changelog ${CHANGES}" || _ret=$?
	if ((_ret != 0)); then
		printf '%s\n' "The mirror appears to be temporarily unavailable. Try again later.
If the problem persists, please open an issue at https://github.com/RagnarokOS/kernel-build/issues"
		exit 2
	fi
}

# Check version. If version matches, exit.
check_version() {
	local _k _v

	_k=$(uname -r)
	_v=$(awk '/Version:/ { print $2 }' "${TMP}/changelog")

	if [[ "$_k" == "$_v" ]]; then
		printf '%s\n' "Kernel is up to date"
		exit 2
	fi
}

# Download kernel, headers, libc-dev and SHA256.sig
dl() {
	local _f _rev _ver

	_rev=$(awk '/Revision:/ { print $2 }' "${TMP}/changelog")
	_ver=$(awk '/Version:/ { print $2 }' "${TMP}/changelog")

	set -A _f -- linux-image-"${_ver}"_"${_ver}"-"${_rev}"_amd64.deb linux-headers-"${_ver}"_"${_ver}"-"${_rev}"_amd64.deb linux-libc-dev_"${_ver}"-"${_rev}"_amd64.deb SHA256.sig

	for _file in "${_f[@]}"; do
		printf '%s\n' "Fetching ${_file}..."
		unpriv -f "${TMP}/${_file}" "wget -q --show-progress -O ${_file} ${MIRROR}${_ver}/${_file}"
	done
}

# Verify sig. If it fails, exit immediately.
check_sig() {
	printf '%s\n' "Verifying signatures..."
	if ! /usr/bin/signify -C -p "$PUBKEY" -x SHA256.sig; then
		echo "Signature verification failed. Exiting..."
		exit 1
	fi
}

# Send the packages to /var/db/kernel
mv_pkgs() {
	local _f _rev _ver

	_rev=$(awk '/Revision:/ { print $2 }' "${TMP}/changelog")
	_ver=$(awk '/Version:/ { print $2 }' "${TMP}/changelog")

	set -A _f -- linux-image-"${_ver}"_"${_ver}"-"${_rev}"_amd64.deb linux-headers-"${_ver}"_"${_ver}"-"${_rev}"_amd64.deb linux-libc-dev_"${_ver}"-"${_rev}"_amd64.deb changelog

	for _file in "${_f[@]}"; do
		mv "$_file" /var/db/kernel
	done
}

install_pkgs() {
	local _f _rev _ver

	_rev=$(awk '/Revision:/ { print $2 }' "/var/db/kernel/changelog")
	_ver=$(awk '/Version:/ { print $2 }' "/var/db/kernel/changelog")

	cd /var/db/kernel || exit
	apt-get install ./linux-image-"${_ver}"_"${_ver}"-"${_rev}"_amd64.deb ./linux-headers-"${_ver}"_"${_ver}"-"${_rev}"_amd64.deb ./linux-libc-dev_"${_ver}"-"${_rev}"_amd64.deb
}

## Main functions

# Only check if an update is available
do_query() {
	cd "${TMP}" || exit
	get_changes
	check_version
}

# If a new version is available, download, but don't install, the kernel
do_download() {
	cd "${TMP}" || exit
	dl
	mv_pkgs
}

# Install or update the kernel
do_update() {
	cd "${TMP}" || exit
	get_changes
	check_version
	dl
	check_sig
	mv_pkgs
	install_pkgs
}

# Cleanup after finish
cleanup() {
	set +e
	rm -rf "${TMP}"
}

trap 'cleanup' EXIT
trap exit HUP INT TERM

# Ensure /var/db/kernel exists and that _apt user has permissions
[[ -d /var/db/kernel ]] || mkdir -p /var/db/kernel && chown _apt /var/db/kernel

case "$1" in
	-d)	do_download
		;;
	-i)	install_pkgs
		;;
	-h)	usage
		;;
	-q)	do_query
		;;
	*)	do_update
		;;
esac
