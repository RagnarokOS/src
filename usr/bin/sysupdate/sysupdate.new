#!/bin/ksh

# Work in Progress

# sysupdate: update Ragnarok base system.
#
# $Ragnarok: sysupdate,v 1.3 2023/08/18 18:46:45 lecorbeau Exp $
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#											#
#	Copyright (c) 2023, Ian LeCorbeau <I-LeCorbeau (at) protonmail (dot) com>	#
#											#
#	Permission to use, copy, modify, and/or distribute this software for any	#
#	purpose with or without fee is hereby granted, provided that the above		#
#	copyright notice and this permission notice appear in all copies.		#
#											#
#	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES	#
#	WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF		#
#	MERCHANTABILITY AND FITNESS IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR		#
#	ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES		#
#	WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN		#
#	ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF		#
#	OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.			#
#											#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

. /lib/ragnarok-shlib

set -e
umask 0022
export PATH=/usr/bin:/bin:/usr/sbin:/sbin

CONF="/etc/sysupdate.conf"
TMP=$(mktemp -d -p /tmp sysupdate.XXXXXXXXXX)
MIRROR=$(getvar MIRROR "$CONF")
PUBKEY=$(getvar PUBKEY "$CONF")
REPOPATH=$(getvar REPOPATH "$CONF")
VERSION=$(getvar VERSION "$CONF")
URL="${MIRROR}/${VERSION}"

usage() {
	printf '%s\n' "
Options:

-d	download, but don't install the sets.

-h	Show this help message.

-q	Check if there are any updates available.

The most common operation is to run sysupdate with no option, which will
download and install available binary updates.
"
}

# Never download stuff from the internet as the root user
# I take no credit for this function. All credit goes to
# Antoine Jacoutot, who wrote OpenBSD's syspatch(1).
unpriv() {
	local _file=$2 _ret=0 _user=_sysupdate

	if [[ $1 == -f && -n ${_file} ]]; then
		# shellcheck disable=SC2188
		>${_file}
		chown "${_user}" "${_file}"
		chmod 0711 "${TMP}"
		shift 2
	fi
	(($# >= 1))

	su -s /bin/sh ${_user} -c "$@" || _ret=$?

	[[ -n ${_file} ]] && chown root "${_file}"

	return ${_ret}
}

# Get the index.txt file.
get_file() {
	local _ret

	printf '%s\n' "Fetching index.txt..."
	cd "${TMP}" || cd
	unpriv -f "${TMP}/index.txt" "wget -q --show-progress -O index.txt ${URL}/index.txt" || _ret=$?
	if ((_ret != 0)); then
		printf '%s\n' "The mirror appears to be temporarily unavailable. Try again later.
If the problem persists, please open an issue at https://github.com/RagnarokOS/repos/issues"
		exit 2
	fi
	unpriv -f "${TMP}/SHA256.sig" "wget -q --show-progress -O SHA256.sig ${URL}/SHA256.sig"
}

# Download the set(s).
dl() {
	local _file="$1"

	cd "${TMP}" || cd
	unpriv -f "${TMP}/${_file}" "wget -q --show-progress -O ${_file} ${URL}/${_file}"
}

# Verify patch file sig. If signify returns a non-zero
# exit status, abort.
check_sig() {
	local _file="$1"

	if ! /usr/bin/signify -C -p "$PUBKEY" -x SHA256.sig "$_file"; then
		echo "Signature verification failed. Exiting..."
		exit 1
	fi
}

# Compare the dates in both index files.
comp_date() {
	local _repo=$1 _file=$2

	/usr/bin/grep "$_repo" "$_file"
}

check_update() {
	local _repo=$1

	# Fetch index.txt and verify its signature
	get_file
	check_sig index.txt

	if [[ $(comp_date "$_repo" "${TMP}/index.txt") == $(comp_date "$_repo" "${REPOPATH}index.txt") ]]; then
		printf '%s\n' "$_repo is up to date"
		return 2
	else
		return 0
	fi
}

# Fetching sets
#get_sets() {
#	local _repos
#
#	# If no args are given, then fetch the repos from the 'installed' file.
#	if [[ -z $1 ]]; then
#		set -A _repos -- $(while IFS= read -r line; do printf '%s\n' "$line"; done < "${REPOPATH}installed")
#		for _repo in "${_repos[@]}"; do
#			get_upd "$_repo"
#		done
#	else
#		_repos=$1
#		get_upd "$_repos"
#	fi
#
#}

# Extract or create tarball
handle_tar() {
	local _archive=$1

	/usr/bin/tar xzpf "$_archive" -C "${REPOPATH}"
}

# Actually download the sets, then check their sig and extract the repo
# to $REPOPATH if sig matches.
get_sets() {
	local _repos _ret

	# If the 'installed' file doesn't exist, assume all repos should be
	# downloaded and installed. Right now only base$VERSION.tgz is available
	# but this will change once x11, xprogs et all get created.
	if [[ ! -f ${REPOPATH}installed ]]; then
		set -A _repos -- base01.tgz
	else
		set -A _repos -- $(while IFS= read -r line; do printf '%s\n' "$line"; done < "${REPOPATH}installed")
	fi

	for _repo in "${_repos[@]}"; do
		check_update "$_repo"
		_ret=$?
		if [[ $_ret == 2 ]]; then
			printf '%s\n' "$_repo is up to date."
		else
			printf '%s\n' "Fetching ${_repo}..."
			dl "$_repo"
			printf '%s\n' "Verifying $_repo signature"
			check_sig "$_repo"
			printf '%s\n' "Extracting ${_repo}..."
			handle_tar "$_repo"
		fi
	done
}

do_query() {
	local _repos _ret

	set -A _repos -- $(while IFS= read -r line; do printf '%s\n' "$line"; done < "${REPOPATH}installed")

	for repo in "${_repos[@]}"; do
		check_update "${_repo}"
		_ret=$?
		if [[ $_ret == 0 ]]; then
			printf '%s\n' "Updates are available for $_repo"
		fi
	done
}

do_update() {
	get_sets
	printf '%s\n' "Updating base system..."
	# Point to the Ragnarok.sources list to only update the base
	# system. Updates to third party packages should be done separately.
	/usr/bin/apt-get update -o Dir::Etc::sourcelist="sources.list.d/ragnarok.sources" \
		-o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0" && \
		/usr/bin/apt-get upgrade
}

# Cleanup after finish
cleanup() {
	set +e
	rm -rf "${TMP}"
}

trap 'cleanup' EXIT
trap exit HUP INT TERM

case "$1" in
	-d)	do_download "$2"
		;;
	-h)	usage
		;;
	-q)	do_query
		;;
	*)	do_update
		;;
esac
