From: Christian Kastner <ckk@kvr.at>
Date: Sun, 20 Dec 2015 18:56:47 +0100
Subject: Manpage corrections and improvements

A collection of various corrections, clarifications, and additions to the
manpages cron.8, crontab.1, and crontab.5 which are not specific to Debian's
version of vixie cron.

Fixes mostly provided originally by Steve Greenland <stevegr@debian.org>, with
numerous smaller contributions by others.

Bug-Debian: https://bugs.debian.org/43282
Bug-Debian: https://bugs.debian.org/893575
Bug-Debian: https://bugs.debian.org/893576
Bug-Debian: https://bugs.debian.org/893579
Bug-Debian: https://bugs.debian.org/934543
Forwarded: no
Last-Update: 2019-09-15
Index: cron/cron.8
===================================================================
--- cron.orig/cron.8
+++ cron/cron.8
@@ -14,9 +14,9 @@
 .\" * I'll try to keep a version up to date.  I can be reached as follows:
 .\" * Paul Vixie          <paul@vix.com>          uunet!decwrl!vixie!paul
 .\" */
-.\" 
+.\"
 .\" $Id: cron.8,v 2.2 1993/12/28 08:34:43 vixie Exp $
-.\" 
+.\"
 .TH CRON 8 "20 December 1993"
 .UC 4
 .SH NAME
@@ -24,36 +24,52 @@ cron \- daemon to execute scheduled comm
 .SH SYNOPSIS
 cron
 .SH DESCRIPTION
-.I Cron
-should be started from /etc/rc or /etc/rc.local.  It will return immediately,
-so you don't need to start it with '&'.
+.I cron
+is started automatically from /etc/init.d on entering multi-user
+runlevels.
+.SH NOTES
 .PP
-.I Cron
-searches /var/cron/tabs for crontab files which are named after accounts in
-/etc/passwd; crontabs found are loaded into memory.
-.I Cron
-also searches for /etc/crontab which is in a different format (see
-.IR crontab(5)).
-.I Cron
-then wakes up every minute, examining all stored crontabs, checking each
-command to see if it should be run in the current minute.  When executing
-commands, any output is mailed to the owner of the crontab (or to the user
-named in the MAILTO environment variable in the crontab, if such exists).
+.I cron
+searches its spool area /var/cron/tabs for crontab
+files (which are named after accounts in
+/etc/passwd); crontabs found are loaded into memory.  Note that
+crontabs in this directory should not be accessed directly -
+the
+.I crontab
+command should be used to access and update them.
+
+.I cron
+also reads /etc/crontab, which is in a slightly different format (see
+.IR crontab (5)).
+.I cron
+then wakes up every minute, examining all stored crontabs, checking
+each command to see if it should be run in the current minute.  When
+executing commands, any output is mailed to the owner of the crontab
+(or to the user named in the MAILTO environment variable in the
+crontab, if such exists).  The children copies of cron running these
+processes have their name coerced to uppercase, as will be seen in the
+syslog and ps output.
 .PP
 Additionally,
 .I cron
 checks each minute to see if its spool directory's modtime (or the modtime
-on
-.IR /etc/crontab)
+on the
+.I /etc/crontab
+file)
 has changed, and if it has,
 .I cron
 will then examine the modtime on all crontabs and reload those which have
 changed.  Thus
 .I cron
 need not be restarted whenever a crontab file is modified.  Note that the
-.IR Crontab (1)
+.IR crontab (1)
 command updates the modtime of the spool directory whenever it changes a
 crontab.
+.I cron
+logs its action to the syslog facility 'cron', and logging may be
+controlled using the standard
+.IR syslogd (8)
+facility.
 .SH "SEE ALSO"
 crontab(1), crontab(5)
 .SH AUTHOR
Index: cron/crontab.1
===================================================================
--- cron.orig/crontab.1
+++ cron/crontab.1
@@ -20,37 +20,50 @@
 .TH CRONTAB 1 "29 December 1993"
 .UC 4
 .SH NAME
-crontab \- maintain crontab files for individual users (V3)
+crontab \- maintain crontab files for individual users (Vixie Cron)
 .SH SYNOPSIS
-crontab [ -u user ] file
+crontab [ \-u user ] file
 .br
-crontab [ -u user ] { -l | -r | -e }
+crontab [ \-u user ] [ \-e ] { \-l | \-r }
 .SH DESCRIPTION
-.I Crontab
+.I crontab
 is the program used to install, deinstall or list the tables
 used to drive the
 .IR cron (8)
 daemon in Vixie Cron.  Each user can have their own crontab, and though
-these are files in /var, they are not intended to be edited directly.
+these are files in /var/spool/cron/crontabs,
+they are not intended to be edited directly.
 .PP
 If the
-.I allow
-file exists, then you must be listed therein in order to be allowed to use
-this command.  If the
-.I allow
+.I /var/cron/allow
+file exists, then you must be listed (one user per line) therein in order to be
+allowed to use this command.  If the
+.I /var/cron/allow
 file does not exist but the
-.I deny
+.I /var/cron.deny
 file does exist, then you must \fBnot\fR be listed in the
-.I deny
-file in order to use this command.  If neither of these files exists, then
-depending on site-dependent configuration parameters, only the super user
-will be allowed to use this command, or all users will be able to use this
-command.
+.I /var/cron/cron.deny
+file in order to use this command.
+.PP
+If neither of these files exists, then depending on site-dependent
+configuration parameters, only the super user will be allowed to use this
+command, or all users will be able to use this command.
+.PP
+If both files exist then
+.I /var/cron/allow
+takes precedence.  Which means that
+.I /var/cron/deny
+is not considered and your user must be listed in
+.I /var/cron/allow
+in order to be able to use the crontab.
+.PP
+Regardless of the existence of any of these files, the root administrative
+user is always allowed to setup a crontab.
 .PP
 If the
-.I -u
+.I \-u
 option is given, it specifies the name of the user whose crontab is to be
-tweaked.  If this option is not given,
+used (when listing) or modified (when editing).  If this option is not given,
 .I crontab
 examines "your" crontab, i.e., the crontab of the person executing the
 command.  Note that
@@ -60,24 +73,25 @@ can confuse
 and that if you are running inside of
 .IR su (8)
 you should always use the
-.I -u
+.I \-u
 option for safety's sake.
 .PP
 The first form of this command is used to install a new crontab from some
 named file or standard input if the pseudo-filename ``-'' is given.
 .PP
 The
-.I -l
+.I \-l
 option causes the current crontab to be displayed on standard output.
 .PP
 The
-.I -r
+.I \-r
 option causes the current crontab to be removed.
 .PP
 The
-.I -e
+.I \-e
 option is used to edit the current crontab using the editor specified by
-the \s-1VISUAL\s+1 or \s-1EDITOR\s+1 environment variables.  After you exit
+the \s-1VISUAL\s+1 or \s-1EDITOR\s+1 environment variables.
+After you exit
 from the editor, the modified crontab will be installed automatically.
 .SH "SEE ALSO"
 crontab(5), cron(8)
@@ -85,13 +99,20 @@ crontab(5), cron(8)
 .nf
 /var/cron/allow
 /var/cron/deny
+/var/cron/crontabs
 .fi
+.PP
+There is one file for each user's crontab under the /var/cron/crontabs
+directory.  Users are not allowed to edit the files under that directory
+directly to ensure that only users allowed by the system to run periodic tasks
+can add them, and only syntactically correct crontabs will be written there.
 .SH STANDARDS
 The
 .I crontab
 command conforms to IEEE Std1003.2-1992 (``POSIX'').  This new command syntax
 differs from previous versions of Vixie Cron, as well as from the classic
 SVR3 syntax.
+
 .SH DIAGNOSTICS
 A fairly informative usage message appears if you run it with a bad command
 line.
Index: cron/crontab.5
===================================================================
--- cron.orig/crontab.5
+++ cron/crontab.5
@@ -16,7 +16,7 @@
 .\" */
 .\"
 .\" $Id: crontab.5,v 2.4 1994/01/15 20:43:43 vixie Exp $
-.\" 
+.\"
 .TH CRONTAB 5 "24 January 1994"
 .UC 4
 .SH NAME
@@ -34,15 +34,19 @@ their own crontabs, eliminating the need
 as part of a cron command.
 .PP
 Blank lines and leading spaces and tabs are ignored.  Lines whose first
-non-space character is a pound-sign (#) are comments, and are ignored.
+non-space character is a hash-sign (#) are comments, and are ignored.
 Note that comments are not allowed on the same line as cron commands, since
 they will be taken to be part of the command.  Similarly, comments are not
 allowed on the same line as environment variable settings.
 .PP
 An active line in a crontab will be either an environment setting or a cron
-command.  An environment setting is of the form,
-.PP
-    name = value
+command.  The crontab file is parsed from top to bottom, so any environment
+settings will affect only the cron commands below them in the file.
+An environment setting is of the form,
+.PP
+.in +4n
+name = value
+.in
 .PP
 where the spaces around the equal-sign (=) are optional, and any subsequent
 non-leading spaces in
@@ -52,15 +56,43 @@ will be part of the value assigned to
 The
 .I value
 string may be placed in quotes (single or double, but matching) to preserve
-leading or trailing blanks.
+leading or trailing blanks.  To define an empty variable, quotes
+.B must
+be used.
+.PP
+The
+.I value
+string is
+.B not
+parsed for environmental substitutions or replacement of variables, thus lines
+like
+.PP
+.in +4n
+.nf
+PATH = $HOME/bin:$PATH
+.fi
+.in
+.PP
+will not work as you might expect. And neither will this work
 .PP
-Several environment variables are set up
-automatically by the
+.in +4n
+.nf
+A=1
+B=2
+C=$A $B
+.fi
+.in
+.PP
+There will not be any substitution for the defined variables in the
+last value.
+.PP
+Several environment variables are set up automatically by the
 .IR cron (8)
 daemon.
-SHELL is set to /bin/sh, and LOGNAME and HOME are set from the /etc/passwd 
-line of the crontab's owner.
-HOME and SHELL may be overridden by settings in the crontab; LOGNAME may not.
+SHELL is set to /bin/sh, and LOGNAME and HOME are set from the /etc/passwd
+line of the crontab's owner.  PATH is set to "/usr/bin:/bin".
+HOME, SHELL, and PATH may be overridden by settings in the crontab;
+LOGNAME is the user that the job is running from, and may not be changed.
 .PP
 (Another note: the LOGNAME variable is sometimes called USER on BSD systems...
 on these systems, USER will be set also.)
@@ -69,16 +101,20 @@ In addition to LOGNAME, HOME, and SHELL,
 .IR cron (8)
 will look at MAILTO if it has any reason to send mail as a result of running
 commands in ``this'' crontab.  If MAILTO is defined (and non-empty), mail is
-sent to the user so named.  If MAILTO is defined but empty (MAILTO=""), no
-mail will be sent.  Otherwise mail is sent to the owner of the crontab.  This
-option is useful if you decide on /bin/mail instead of /usr/lib/sendmail as
-your mailer when you install cron -- /bin/mail doesn't do aliasing, and UUCP
-usually doesn't read its mail.
+sent to the user so named.  MAILTO may also be used to direct mail to multiple
+recipients by separating recipient users with a comma.  If MAILTO is defined
+but empty (MAILTO=""), no mail will be sent.  Otherwise mail is sent to the
+owner of the crontab.
 .PP
 The format of a cron command is very much the V7 standard, with a number of
 upward-compatible extensions.  Each line has five time and date fields,
-followed by a user name if this is the system crontab file,
-followed by a command.  Commands are executed by
+followed by a command, followed by a newline character ('\en').
+The system crontab (/etc/crontab) uses the same format, except that
+the username for the command is specified after the time and
+date fields and before the command.  The fields may be separated
+by spaces or tabs.
+.PP
+Commands are executed by
 .IR cron (8)
 when the minute, hour, and month of year fields match the current time,
 .I and
@@ -93,30 +129,30 @@ field	allowed values
 .br
 -----	--------------
 .br
-minute	0-59
+minute	0\(en59
 .br
-hour	0-23
+hour	0\(en23
 .br
-day of month	0-31
+day of month	1\(en31
 .br
-month	0-12 (or names, see below)
+month	1\(en12 (or names, see below)
 .br
-day of week	0-7 (0 or 7 is Sun, or use names)
+day of week	0\(en7 (0 or 7 is Sun, or use names)
 .br
 .PP
 A field may be an asterisk (*), which always stands for ``first\-last''.
 .PP
 Ranges of numbers are allowed.  Ranges are two numbers separated
 with a hyphen.  The specified range is inclusive.  For example,
-8-11 for an ``hours'' entry specifies execution at hours 8, 9, 10
+8\-11 for an ``hours'' entry specifies execution at hours 8, 9, 10
 and 11.
 .PP
 Lists are allowed.  A list is a set of numbers (or ranges)
-separated by commas.  Examples: ``1,2,5,9'', ``0-4,8-12''.
+separated by commas.  Examples: ``1,2,5,9'', ``0\-4,8\-12''.
 .PP
 Step values can be used in conjunction with ranges.  Following
 a range with ``/<number>'' specifies skips of the number's value
-through the range.  For example, ``0-23/2'' can be used in the hours
+through the range.  For example, ``0\-23/2'' can be used in the hours
 field to specify command execution every other hour (the alternative
 in the V7 standard is ``0,2,4,6,8,10,12,14,16,18,20,22'').  Steps are
 also permitted after an asterisk, so if you want to say ``every two
@@ -131,58 +167,160 @@ The ``sixth'' field (the rest of the lin
 run.
 The entire command portion of the line, up to a newline or %
 character, will be executed by /bin/sh or by the shell
-specified in the SHELL variable of the cronfile.
+specified in the SHELL variable of the crontab file.
 Percent-signs (%) in the command, unless escaped with backslash
-(\\), will be changed into newline characters, and all data
+(\e), will be changed into newline characters, and all data
 after the first % will be sent to the command as standard
-input.
+input.  There is no way to split a single command line onto multiple
+lines, like the shell's trailing "\e".
 .PP
 Note: The day of a command's execution can be specified by two
 fields \(em day of month, and day of week.  If both fields are
-restricted (ie, aren't *), the command will be run when
+restricted (i.e., don't start with *), the command will be run when
 .I either
 field matches the current time.  For example,
 .br
 ``30 4 1,15 * 5''
 would cause a command to be run at 4:30 am on the 1st and 15th of each
-month, plus every Friday.
+month, plus every Friday.  One can, however, achieve the desired result
+by adding a test to the command (see the last example in EXAMPLE CRON FILE
+below).
+.PP
+Instead of the first five fields, one of eight special strings may appear:
+.IP
+.ta 1.5i
+string	meaning
+.br
+------	-------
+.br
+@reboot	Run once, at startup.
+.br
+@yearly	Run once a year, "0 0 1 1 *".
+.br
+@annually	(same as @yearly)
+.br
+@monthly	Run once a month, "0 0 1 * *".
+.br
+@weekly	Run once a week, "0 0 * * 0".
+.br
+@daily	Run once a day, "0 0 * * *".
+.br
+@midnight	(same as @daily)
+.br
+@hourly	Run once an hour, "0 * * * *".
+.br
+.PP
+Please note that startup, as far as @reboot is concerned, is the time when
+the
+.IR cron (8)
+daemon startup.  In particular, it may be before some system daemons,
+or other facilities, were startup.  This is due to the boot order
+sequence of the machine.
+
 .SH EXAMPLE CRON FILE
+
+The following lists an example of a user crontab file.
+
 .nf
 
-# use /bin/sh to run commands, no matter what /etc/passwd says
-SHELL=/bin/sh
+# use /bin/bash to run commands, instead of the default /bin/sh
+SHELL=/bin/bash
 # mail any output to `paul', no matter whose crontab this is
 MAILTO=paul
 #
 # run five minutes after midnight, every day
 5 0 * * *       $HOME/bin/daily.job >> $HOME/tmp/out 2>&1
-# run at 2:15pm on the first of every month -- output mailed to paul
+# run at 2:15pm on the first of every month \(em output mailed to paul
 15 14 1 * *     $HOME/bin/monthly
 # run at 10 pm on weekdays, annoy Joe
-0 22 * * 1-5	mail -s "It's 10pm" joe%Joe,%%Where are your kids?%
-23 0-23/2 * * * echo "run 23 minutes after midn, 2am, 4am ..., everyday"
-5 4 * * sun     echo "run at 5 after 4 every sunday"
+0 22 * * 1\-5    mail \-s "It's 10pm" joe%Joe,%%Where are your kids?%
+23 0\-23/2 * * * echo "run 23 minutes after midn, 2am, 4am ..., everyday"
+5 4 * * sun     echo "run at 5 after 4 every Sunday"
+# Run on every second Saturday of the month
+0 4 8\-14 * *    test $(date +\e%u) \-eq 6 && echo "2nd Saturday"
+.fi
+.SH EXAMPLE SYSTEM CRON FILE
+
+The following lists the content of a regular system-wide crontab file.  Unlike a
+user's crontab, this file has the username field, as used by /etc/crontab.
+
+.nf
+# /etc/crontab: system-wide crontab
+# Unlike any other crontab you don't have to run the `crontab'
+# command to install the new version when you edit this file
+# and files in /etc/cron.d.  These files also have username fields,
+# that none of the other crontabs do.
+
+SHELL=/bin/sh
+PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
+
+# m h dom mon dow user	command
+17 * * * *  root  cd / && run-parts \-\-report /etc/cron.hourly
+25 6 * * *  root  test \-x /usr/sbin/anacron || ( cd / && run-parts \-\-report /etc/cron.daily )
+47 6 * * 7  root  test \-x /usr/sbin/anacron || ( cd / && run-parts \-\-report /etc/cron.weekly )
+52 6 1 * *  root  test \-x /usr/sbin/anacron || ( cd / && run-parts \-\-report /etc/cron.monthly )
+#
 .fi
 .SH SEE ALSO
 cron(8), crontab(1)
 .SH EXTENSIONS
 When specifying day of week, both day 0 and day 7 will be considered Sunday.
-BSD and ATT seem to disagree about this.
+BSD and AT&T seem to disagree about this.
 .PP
-Lists and ranges are allowed to co-exist in the same field.  "1-3,7-9" would
-be rejected by ATT or BSD cron -- they want to see "1-3" or "7,8,9" ONLY.
+Lists and ranges are allowed to co-exist in the same field.
+"1\-3,7\-9" would be rejected by AT&T or BSD cron \(em they want
+to see "1\-3" or "7,8,9" ONLY.
 .PP
-Ranges can include "steps", so "1-9/2" is the same as "1,3,5,7,9".
+Ranges can include "steps", so "1\-9/2" is the same as "1,3,5,7,9".
 .PP
-Names of months or days of the week can be specified by name.
+Months or days of the week can be specified by name.
 .PP
-Environment variables can be set in the crontab.  In BSD or ATT, the
+Environment variables can be set in the crontab.  In BSD or AT&T, the
 environment handed to child processes is basically the one from /etc/rc.
 .PP
 Command output is mailed to the crontab owner (BSD can't do this), can be
 mailed to a person other than the crontab owner (SysV can't do this), or the
 feature can be turned off and no mail will be sent at all (SysV can't do this
 either).
+.PP
+All of the `@' commands that can appear in place of the first five fields
+are extensions.
+.SH LIMITATIONS
+The
+.I cron
+daemon runs with a defined timezone.  It currently does not support
+per-user timezones.  All the tasks: system's and user's will be run based on the
+configured timezone.  Even if a user specifies the
+.I TZ
+environment variable in his
+.I crontab
+this will affect only the commands executed in the crontab, not the execution
+of the crontab tasks themselves.
+
+The
+.I crontab
+syntax does not make it possible to define all possible periods one can
+imagine.  For example, it is not straightforward to define the last
+weekday of a month.
+To have a task run in a time period that cannot be defined using
+.I crontab
+syntax, the best approach would be to have the program itself check the
+date and time information and continue execution only if the period
+matches the desired one.
+
+If the program itself cannot do the checks then a wrapper script would be
+required.  Useful tools that could be used for date analysis are
+.I ncal
+or
+.I calendar
+For example, to run a program the last Saturday of every month you could use
+the following wrapper code:
+
+.nf
+0 4 * * Sat   [ "$(date +\e%e)" = "$(LANG=C ncal | sed \-n 's/^Sa .* \e([0\-9]\e+\e) *$/\e1/p')" ] && echo "Last Saturday" && program_to_run
+.fi
+
+
 .SH AUTHOR
 .nf
 Paul Vixie <paul@vix.com>
