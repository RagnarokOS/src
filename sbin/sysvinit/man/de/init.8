'\" -*- coding: UTF-8 -*-
.\" Copyright (C) 1998-2004 Miquel van Smoorenburg.
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program; if not, write to the Free Software
.\" Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
.\"
.\"{{{}}}
.\"{{{  Title
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH INIT 8 "29. Juli 2004" "sysvinit " Linux\-Systemverwaltungshandbuch
.\"}}}
.\"{{{  Name
.SH BEZEICHNUNG
.\"}}}
.\"{{{  Synopsis
init, telinit \- Initialisierung der Prozesssteuerung
.SH ÜBERSICHT
\fB/sbin/init\fP [\fB \-a \fP] [\fB \-s \fP] [\fB \-b \fP] [ \fB\-z\fP \fIxxx\fP ] [\fB 0123456Ss
\fP]
.br
\fB/sbin/init\fP [\fB \-\-version \fP]
.br
\fB/sbin/telinit\fP [ \fB\-t\fP \fISEKUNDEN\fP ] [\fB 0123456sSQqabcUu \fP]
.br
.\"}}}
.\"{{{  Description
\fB/sbin/telinit\fP [ \fB\-e\fP \fIVAR\fP[\fB=\fP\fIWERT\fP] ]
.SH BESCHREIBUNG
.\"{{{  init
.SS Init
\fBinit\fP ist der Elternprozess aller Prozesse. Seine Hauptaufgabe besteht
darin, Prozesse aus einem Skript in der Datei \fI/etc/inittab\fP zu erzeugen
(siehe auch \fBinittab\fP(5)). Diese Datei hat normalerweise Einträge, die
\fBinit\fP dazu veranlassen, auf jeder Leitung \fBgetty\fPs zu erzeugen, auf der
sich ein Benutzer einloggen kann. Er steuert auch alle unabhängigen
Prozesse, die von einem bestimmten System benötigt werden.
.PP
.\"{{{ Runlevels
.SH RUNLEVEL
Ein \fIRunlevel\fP ist eine Software\-Konfiguration des Systems, der es nur
einer ausgewählten Gruppe von Prozessen erlaubt, ausgeführt zu werden. Die
Prozesse, die von \fBinit\fP für jeden dieser Runlevel erzeugt werden, sind in
der Datei \fI/etc/inittab\fP definiert. \fBInit\fP kann in einem von acht
Runleveln sein: \fB0\-6\fP und \fBS\fP (auch \fBs\fP). \fBInit\fP wechselt den Runlevel,
wenn ein privilegierter Benutzer das Programm \fB/sbin/telinit\fP startet, das
\fBinit\fP passende Signale sendet, die ihm mitteilen, in welchen Runlevel es
wechseln soll.
.PP
Die Runlevel \fBS\fP, \fB0\fP, \fB1\fP und \fB6\fP sind reserviert. Der Runlevel S wird
benutzt, um das System beim Start zu initialisieren. Wenn Runlevel S (beim
Start) oder Runlevel 1 (umschalten von einem Mehrbenutzer\-Runlevel)
gestartet wird, wechselt das System in den »Einzelbenutzermodus«, nach dem
der aktuelle Runlevel S ist. Runlevel 0 wird benutzt, um das System zu
stoppen, Runlevel 6 startet das System neu.
.PP
Nach dem Starten durch S tritt das System automatisch in die
Mehrbenutzer\-Runlevel 2 bis 5 ein, falls es dort kein Problem gibt, das vom
Administrator im Einzelbenutzermodus behoben werden muss. Normalerweise
führt der Administrator nach Eintreten in den Einzelbenutzermodus
Wartungsarbeiten durch und startet dann das System neu.
.PP
Lesen Sie die Handbuchseiten von \fBshutdown\fP(8) und \fBinittab\fP(5), um
weitere Informationen zu erhalten.
.PP
Die Runlevel 7\-9 sind ebenfalls gültig, wenngleich nicht wirklich
dokumentiert. Dies ist deshalb so, weil »traditionelle« Unix\-Varianten sie
nicht benutzen.
.PP
.\"}}}
Die Runlevel \fIS\fP und \fIs\fP sind identisch. Intern sind sie Aliase für den
gleichen Runlevel.
.PP
.SH SYSTEMSTART
Nachdem \fBinit\fP im letzten Schritt des Startprozesses aufgerufen wird, sucht
es nach der Datei \fI/etc/inittab\fP und sieht nach, ob es dort einen
\fBinitdefault\fP\-Eintrag gibt (siehe \fBinittab\fP(5)). Der Eintrag
\fBinitdefault\fP bestimmt den Anfangs\-\fIRunlevel\fP des Systems. Falls es dort
keinen derartigen Eintrag gibt (oder gar keine Datei \fI/etc/inittab\fP
existiert), muss der \fIRunlevel\fP in der Systemkonsole eingegeben werden.
.PP
Die Runlevel \fBS\fP oder \fBs\fP initialisieren das System und benötigen keine
\fI/etc/inittab\fP\-Datei.
.PP
Im Einzelbenutzermodus wird \fB/sbin/sulogin\fP auf \fI/dev/console\fP aufgerufen.
.PP
Beim Eintritt in den Einzelbenutzermodus initialisiert \fBinit\fP die
\fBstty\fP\-Einstellungen der Konsolen auf vernünftige Werte. Der »Clocal«\-Modus
wird gesetzt. Hardware\-Geschwindigkeit und Datenflusssteuerung werden nicht
geändert.
.PP
Beim ersten Eintritt in den Mehrbenutzermodus führt \fBinit\fP die \fBboot\fP\- und
\fBbootwait\fP\-Einträge aus, um das Einhängen von Dateisystemen zu erlauben,
bevor Anwender sich anmelden können. Dann werden alle Einträge, die zum
Runlevel passen, verarbeitet.
.PP
Wenn ein neuer Prozess gestartet wird, prüft \fBinit\fP zuerst, ob die Datei
\fI/etc/initscript\fP existiert. Ist dies der Fall, benutzt es dieses Skript,
um den Prozess zu starten.
.PP
Jedesmal, wenn ein Kindprozess endet, zeichnet \fBinit\fP diesen Umstand und
den Grund der Beendigung in \fI/var/run/utmp\fP und \fI/var/log/wtmp\fP auf,
sofern diese Dateien existieren.
.SH "RUNLEVEL ÄNDERN"
Nachdem alle vorgesehenen Prozesse erzeugt worden sind, wartet \fBinit\fP
darauf, dass ein untergeordneter Prozess endet, auf ein Stromausfallsignal
oder darauf, dass \fBtelinit\fP einen Wechsel des Runlevels signalisiert. Wenn
eine der drei oben genannten Bedingungen erfüllt ist, untersucht \fBinit\fP
nochmals die \fI/etc/inittab\fP\-Datei. Es können jederzeit neue Einträge zu
dieser Datei hinzugefügt werden. Jedoch wartet \fBinit\fP immer noch darauf,
dass einer der drei oben genannten Bedingungen eintritt. Um eine sofortige
Antwort bereitzustellen, können die Befehle \fBtelinit Q\fP oder \fBq\fP \fBinit\fP
aufwecken, um die Datei \fI/etc/inittab\fP erneut zu prüfen (neu zu laden).
.PP
Falls \fBinit\fP sich nicht im Einzelbenutzermodus befindet, und ein
Stromausfallsignal (SIGPWR) empfängt, liest es die Datei
\fI/etc/powerstatus\fP. Anschließend wird ein Befehl anhand des Inhalts der
Datei gestartet:
.IP F(EHLSCHLAG)
Strom fällt aus, die USV versorgt den Rechner mit Strom. Die \fBpowerwait\fP\-
und \fBpowerfail\fP\-Einträge werden ausgeführt.
.IP O(K)
Stromkreis wurde wieder geschlossen, die \fBpowerokwait\fP\-Einträge werden
ausgeführt.
.IP L(OW/niedrig)
Strom fällt aus und der Ladestand der USV ist niedrig. Die
\fBpowerfailnow\fP\-Einträge werden ausgeführt.
.PP
Wenn \fI/etc/powerstatus\fP nicht existiert oder etwas anderes enthält als die
Buchstaben \fBF\fP, \fBO\fP oder \fBL\fP, wird \fBinit\fP sich so verhalten, als hätte
es den Buchstaben \fBF\fP gelesen.
.PP
Die Verwendung von \fBSIGPWR\fP und \fI/etc/powerstatus\fP werden nicht
empfohlen. Wenn etwas mit \fBinit\fP interagieren möchte, sollte der
Steuerkanal \fI/run/initctl\fP verwendet werden \- lesen Sie die Handbuchseite
von \fBinitctl\fP(5), um weitere Dokumentation darüber zu erhalten.
.PP
.\"}}}
.\"{{{  telinit
Falls \fBinit\fP die Aufforderung zum Wechsel des Runlevels erhält, sendet es
das Warnsignal \fBSIGTERM\fP an alle nicht im neuen Runlevel definierten
Prozesse. Dann wartet es drei Sekunden, bevor es diese Prozesse gewaltsam
per Signal \fBSIGKILL\fP beendet. Beachten Sie, dass \fBinit\fP davon ausgeht,
dass diese Prozesse (und ihre Unterprozesse) in der gleichen Prozessgruppe
verbleiben, die \fBinit\fP ursprünglich für sie erstellt hatte. Wenn Prozesse
ihre Gruppenzugehörigkeit andern, werden Sie diese Signale nicht
empfangen. Solche Prozesse müssen separat beendet werden.
.SH TELINIT
\fB/sbin/telinit\fP ist auf \fB/sbin/init\fP verlinkt. Es empfängt Argumente aus
einem Buchstaben oder \fBinit\fP\-Signale, um die zugehörige Aktion
durchzuführen. Die folgenden Argumente dienen als Anweisungen für
\fBtelinit\fP:
.IP "\fB0\fP, \fB1\fP, \fB2\fP, \fB3\fP, \fB4\fP, \fB5\fP oder \fB6\fP"
\fBinit\fP mitteilen, in den angegebenen Runlevel zu schalten.
.IP "\fBa\fP, \fBb\fP, \fBc\fP"
tell \fBinit\fP to process only those \fB/etc/inittab\fP file entries having
runlevel \fBa\fP, \fBb\fP or \fBc\fP.
.IP "\fBQ\fP oder \fBq\fP"
\fBinit\fP mitteilen, die Datei \fI/etc/inittab\fP erneut zu prüfen.
.IP "\fBS\fP oder \fBs\fP"
\fBinit\fP mitteilen, in den Einzelbenutzermodus zu wechseln.
.IP "\fBU\fP oder \fBu\fP"
\fBinit\fP mitteilen, sich selbst erneut (unter Beibehalten des Status)
auszuführen. Es kommt zu keiner erneuten Ausführung der Datei
\fI/etc/inittab\fP. Der Runlevel sollte einer aus \fBSs0123456\fP sein,
anderenfalls wird die Anfrage stillschweigend ignoriert.
.PP
\fBtelinit\fP kann dem \fBinit\fP\-Prozess mitteilen, wie viel Zeit dieser zwischen
dem Senden der Signale \fBSIGTERM\fP und \fBSIGKILL\fP warten soll. Die Vorgabe
ist drei Sekunden, dies kann aber durch die Option \fB\-t\fP geändert werden.
.PP
\fBtelinit \-e\fP weist \fBinit\fP an, die Umgebung für Prozesse zu ändern, die es
erzeugt. Das Argument von \fB\-e\fP ist entweder in der Form \fIVAR\fP=\fIWERT\fP, was
die Variable \fIVAR\fP auf den Wert \fIWERT\fP setzt oder in der Form \fIVAR\fP (ohne
Gleichheitszeichen), was die Variable \fIVAR\fP leert.
.PP
\fBinit\fP kann nur von Benutzern mit geeigneten Rechten aufgerufen werden.
.PP
.\"}}}
.\"}}}
Das Programm \fBinit\fP prüft durch Auswerten der Prozesskennung, ob es \fBinit\fP
oder \fBtelinit\fP ist. Der echte Prozess von \fBinit\fP ist immer \fB1\fP. Daraus
folgt, dass jemand anstelle des Aufrufs \fBtelinit\fP auch nur \fBinit\fP als
Abkürzung benutzen kann.
.SH UMGEBUNGSVARIABLEN
\fBInit\fP setzt folgende Umgebungsvariablen für alle seine Kindprozesse:
.IP \fBPATH\fP
\fI/bin:/usr/bin:/sbin:/usr/sbin\fP
.IP \fBINIT_VERSION\fP
Wie der Name schon sagt. Nützlich, um festzustellen, ob ein Skript direkt
von \fBinit\fP ausgeführt wird.
.IP \fBRUNLEVEL\fP
Der aktuelle Runlevel des Systems.
.IP \fBPREVLEVEL\fP
Der vorherige Runlevel (nützlich nach einer Änderung des Runlevels).
.IP \fBCONSOLE\fP
Die Systemkonsole. Diese wird tatsächlich vom Kernel vererbt; wenn sie
jedoch nicht gesetzt ist, wird \fBinit\fP sie als Vorgabe auf \fI/dev/console\fP
setzen.
.SH BOOTSCHALTER
Es ist möglich, \fBinit\fP eine Reihe von Bootschaltern vom Bootmonitor aus
(z.B. LILO oder GRUB) zu übergeben. \fBinit\fP akzeptiert folgende Schalter:
.TP  0.5i
\fB\-s, S, single\fP
startet im Einzelbenutzermodus. In diesem Modus wird zuerst die Datei
\fI/etc/inittab\fP untersucht und die »rc«\-Startskripte werden ausgeführt,
bevor die Einzelbenutzer\-Shell gestartet wird.
.PP
.TP  0.5i
\fB1\-5\fP
Runlevel, in den gestartet wird.
.PP
.TP  0.5i
\fB\-b\fP, \fBemergency\fP
startet direkt in eine Einzelbenutzer\-Shell, ohne irgendwelche anderen
Startskripte auszuführen.
.PP
.TP  0.5i
\fB\-a\fP, \fBauto\fP
Der LILO\-Bootloader fügt das Wort »auto« zur Befehlszeile hinzu, wenn der
Kernel mit der Standard\-Befehlszeile (ohne Eingriff des Anwenders) gestartet
wird. Falls dies gefunden wird, setzt \fBinit\fP die Umgebungsvariable
»AUTOBOOT« auf »yes«. Beachten Sie, dass Sie dies nicht für irgendwelche
Sicherheitsmaßnahmen verwenden können \- selbstverständlich kann der Anwender
»auto« oder \fB\-a\fP manuell auf der Befehlszeile angeben.
.PP
.TP  0.5i
\fB\-z \fP\fIxxx\fP
Das Argument zu \fB\-z\fP wird ignoriert. Sie können es benutzen, um die
Befehlszeile etwas zu verlängern, damit sie etwas mehr Platz auf dem Stack
reserviert. \fBinit\fP kann dann die Befehlszeile derart verändern, dass
\fBps\fP(1) den aktuellen Runlevel anzeigt.
.PP
.TP  0.5i
\fB\-\-version\fP
Wenn dieses Argument alleine verwendet wird, zeigt es die aktuelle Version
von \fBinit\fP auf der Konsole/Standardausgabe an. Dies ist eine schnelle
Methode, herauszufinden, welche \fBinit\fP\-Software und Version verwendet
wird. Nachdem die Versionsinformation angezeigt wurde, beendet sich \fBinit\fP
sofort mit einem Rückgabewert von Null.
.PP
.SH SCHNITTSTELLE
\fBinit\fP lauscht auf einem \fIFIFO\fP in /dev, \fI/run/initctl\fP, auf
Nachrichten. \fBtelinit\fP benutzt diesen, um mit \fBinit\fP zu kommunizieren. Die
Schnittstelle ist noch nicht sehr ausführlich dokumentiert oder
fertiggestellt. Wer interessiert ist, sollte die Datei \fIinitreq.h\fP im
Unterverzeichnis des \fBinit\fP\-Quellcode\-Tar\-Archives studieren.
.SH SIGNALE
Init reagiert auf mehrere Signale:
.TP  0.5i
\fBSIGHUP\fP
Hat die gleichen Auswirkungen wie \fBtelinit q\fP.
.PP
.TP  0.5i
\fBSIGUSR1\fP
Beim Empfang dieses Signals schließt \fBinit\fP seinen Steuerungs\-FIFO
\fI/run/initctl\fP und öffnet ihn wieder. Nützlich für Systemstartskripte, wenn
\fI/dev\fP neu eingehängt wird.
.TP  0.5i
\fBSIGUSR2\fP
Wenn \fBinit\fP \fBSIGUSR2\fP empfängt, schließt \fBinit\fP sich und läßt das
Steuer\-FIFO \fB/run/initctl\fP geschlossen. Damit können Sie sicherstellen,
dass \fBinit\fP keine Dateien offen hält. Allerdings hindert es \fBinit\fP auch
daran, die Runlevel zu ändern. Das bedeutet, dass Befehle wie \fBshutdown\fP(8)
nicht mehr funktionieren. Der FIFO kann durch Senden des Signals \fBSIGUSR1\fP
an \fBinit\fP wieder geöffnet werden.
.TP  0.5i
\fBSIGINT\fP
Normalerweise sendet der Kernel dieses Signal an \fIinit\fP, wenn STRG\-ALT\-ENTF
gedrückt wurde. Es aktiviert die Aktion \fIctrlaltdel\fP.
.TP  0.5i
\fBSIGWINCH\fP
Der Kernel sendet dieses Signal, falls die \fIKeyboardSignal\fP\-Taste gedrückt
wurde. Es aktiviert die \fIkbdrequest\fP\-Aktion.

.\"{{{  Conforming to
.SH "KONFORM ZU"
.\"}}}
.\"{{{  Files
\fBinit\fP ist kompatibel zu System\-V\-Init. Es arbeitet eng mit den Skripten in
den Verzeichnissen \fI/etc/init.d\fP und \fI/etc/rc{runlevel}.d\fP zusammen. Falls
Ihr System diesem Grundsatz folgt, sollte sich in diesem Verzeichnis eine
\fBREADME\fP\-Datei befinden, die erklärt, wie diese Skripte funktionieren.
.SH DATEIEN
.nf
/etc/inittab
/etc/initscript
/dev/console
/var/run/utmp
/var/log/wtmp
/run/initctl
.fi
.\"}}}
.\"{{{  Warnings
.SH WARNUNGEN
\fBinit\fP geht davon aus, dass alle Prozesse und Kindprozesse in der selben
Prozessgruppe verbleiben, die ursprünglich für sie eingerichtet wurde. Falls
einer dieser Prozesse die Gruppe wechselt, kann \fBinit\fP ihn nicht mehr
beenden und es kann passieren, dass Sie in einem Zustand landen, in dem zwei
Prozesse von einer Terminalzeile Befehle einlesen wollen.
.PP
.\"}}}
.\"{{{  Diagnostics
Auf einem Debian\-System veranlasst das Eintreten in Runlevel 1, dass alle
Prozesse mit Ausnahme von Kernel\-Threads und dem Skript, das das Beenden
erledigt und andere Prozesse in deren Sitzung, beendet werden. Als
Konsequenz davon ist es nicht sicher, von Runlevel 1 zu einem
Mehrbenutzer\-Runlevel zurückzukehren: Daemons, die in Runlevel S gestartet
wurden und für normale Aktionen benötigt werden, laufen nicht länger. Das
System sollte neu gestartet werden.
.SH DIAGNOSE
.\"}}}
.\"{{{  Author
Wenn \fBinit\fP herausfindet, dass es kontinuierlich einen Eintrag öfter als
zehn mal in zwei Minuten neu erzeugt, wird es annehmen, dass ein Fehler in
der Befehlszeile vorliegt, eine Fehlermeldung auf der Befehlszeile erzeugen
und sich weigern, den Eintrag auszuführen, bis fünf Minuten vergangen sind
oder es ein Signal empfängt. Dieses verhindert, dass Systemressourcen
verschwendet werden, wenn jemandem ein Tippfehler in \fI/etc/inittab\fP
unterläuft oder das zum Eintrag gehörende Programm gelöscht wird.
.SH AUTOR
.\"}}}
.\"{{{  See also
.MT miquels@\:cistron\:.nl
Miquel van Smoorenburg
.ME
, ursprüngliche
Handbuchseite von
.MT u31b3hs@\:pool\:.informatik\:.rwth\-aachen\:.de
Michael Haardt
.ME .
.SH "SIEHE AUCH"
\fBgetty\fP(1), \fBlogin\fP(1), \fBsh\fP(1), \fBrunlevel\fP(8), \fBshutdown\fP(8),
\fBkill\fP(1), \fBinitctl\fP(5), \fBinittab\fP(5), \fBinitscript\fP(5), \fButmp\fP(5)
.\"}}}
